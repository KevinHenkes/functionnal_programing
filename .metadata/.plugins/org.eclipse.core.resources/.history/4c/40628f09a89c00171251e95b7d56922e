package fr.kevin.lambda;

import java.lang.reflect.Field;
import java.util.Collection;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Stream;

import fr.kevin.lambda.entity.User;

public class Main {
	private static final Logger LOGGER = Logger.getGlobal();

	public static void main(String[] args) {
		Stream<User> users = Stream.of(new User("test", "test", 20),
				new User("test", "test", 20), new User("test", "test", 20),
				new User("test", "test", 20), new User("test", "test", 20),
				new User("test", "test", 20), new User("test", "test", 20),
				new User("test", "test", 20), new User("test", "test", 20),
				new User("test", "test", 20), new User("test", "test", 20),
				new User("test", "test", 20), new User("test", "test", 20),
				new User("test", "test", 20), new User("test", "test", 20));
	
		Stream<User> mapUser = users.flatMap(Collection::stream);
	}

	
	
	private static Integer resizeArray(Object[] array, Integer length) {
		try {
			final Field arrayLength = array.getClass().getDeclaredField("length");
			arrayLength.setAccessible(true);
			arrayLength.setInt(array, length);

			return 0;
		} catch (NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException e) {
			LOGGER.log(Level.SEVERE, e.getMessage());

			return 1;
		}

	}

}
